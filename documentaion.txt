----------DATA PREPARATION------------

The original data contained numerous errors and inaccuracies.
They were also in Polish. And they were not suitable for a publication because they contained sensitive data like names, credit card numbers and other.
In order to prepare the .csv file for publication, I performed the following steps: 


    # Receiving pandas.errors.ParserError: Error tokenizing data. C error I tried to fix with encoding = 'utf-8' and error_bad_lines = False, but it deleted some lines.
    # Finally, the solution was very simple, it was enough to enter delimiter = ';' as reading conditions.
    
df = pd.read_csv(list_of_operations.csv', delimiter=';')

    # rename columns from Polish to English
    
df = df.rename({'Data księgowania': 'Posting Date', 'Nadawca / Odbiorca': 'Sender/Reciver',
                'Rachunek docelowy': 'Account', 'Tytułem': 'Title', 'Kwota operacji': 'Amount', 'Waluta': 'Currency',
                'Typ operacji': 'Type', 'Kategoria': 'Category'}, axis=1)
                
    # In the 'Accountt' column, there is a problem with replacing the type object with float.
    # Trying with astype or Series.to_numeric fails, adding errors = 'coerce' changes all str to NaN.
    # The solution is df.Series.str.replace, first e.g. string 1 000,00 to 1000,00 with - ('', '') - to remove the space in str,
    # then convert 1000,00 to 1000.00 - (' , ','. ') - to change comma to period and str to float.
    # The complement is the pd.to_numeric function which changes the type object to float.
    
df['Account'] = df['Account'].str.replace(' ', '')
df['Account'] = df['Account'].str.replace(',', '.')
df['Account'] = pd.to_numeric(df['Account'])

    # Changing the date in the 'Posting Date' column from Object type to datetime using pd.Series.to_datetime
    
df['Posting Date'] = pd.to_datetime(df['Posting Date'], dayfirst=True)

    # Delete unnecessary columns 
    
del df['Data waluty']
del df['Rachunek źródłowy']
del df['Numer referencyjny']

    # To clear the data and remove all sensitive information I had to create a series of dictionaries for each column 
    
dict_sender ={} For clear ['Sender/Reciver'] data. This dictionary was about 108 lines of code, 250 sentence pairs.
dict_account ={} For clear ['Account'] data. This dictionary was about 12 lines of code, 25 pair od word.
dict_title = {} For clear ['Title'] data. This dictionary was about 46 lines of code, 100 sentences pairs.
dict_type = {} For clear ['Type'] data. This dictionary was 8 lines of code and 18 sentences.
dict_cat ={} For clear ['Category'] data. This dictionary was 16 line of code and 35 sentences pairs
dict_cur = {'PLN': 'USD'} Only for changing Currency.

    # After creating all dictionaries, starting to mapped all data.
    
df['Sender/Reciver'] = df['Sender/Reciver'].map(dict_sender)
df['Account'] =df['Account'].map(dict_account)
df['Title'] = df['Title'].map(dict_title)
df['Type'] = df['Type'].map(dict_type)
df['Category'] = df['Category'].map(dict_cat)
df['Currency'] = df['Currency'].map(dict_cur)

    # Then I write all changes in new .csv file
    
df.to_csv('newfile.csv', index=False)


----------DATA PROCESSING------------


      # There was a problem with the incorrect change of the date, when the day of the month was in the range 13-31, the conversion was correct,
      # while when the day of the month was in the range 1-12 then the program replaced the value of 'day' with 'month'
      # by which instead of e.g. 2021-04-11 (eleventh of April) received 2021-11-04 (fourth of November). Problem solved with dayfirst = True.
      
      # After processing the data, I started writing the code. I started to create a Transactions class which by default will hold all possible options for our data.
      
      # The first option was to create a function that displays a list of transactions in a given month or year.
      # The problem that arose here was the lack of clarity about the month in which we are talking about, so the latest one was always displayed.
      # The error was quickly fixed using the lambda function: time (time.year, time.month) where the year and month were mapped as tuple,
      # so you could select transactions from any month.
      
      # Addition of a function that displays transactions in any period of time. The condition inclusive = True allowed to include the start date in the search as well.
      
      # Another element was to create a function displaying the list of receipts, the list of expenses and the sum of these transactions.
      # Everything can be broken down into annual, monthly or any time periods.
      
      # Creation of the info() function which allows to display all the data of interest to us in one simple command.
